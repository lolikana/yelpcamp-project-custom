<% layout("layout/boilerplate.ejs") %>
<section class="h-full">
  <div id="mapbox-cluster" class="z-30 h-[300px] w-full"></div>
  <h1 class="page-h1 text-center">All Campgrounds</h1>
  <div
    class="flex w-full flex-col items-center gap-3 px-6 md:flex-row md:flex-wrap md:justify-around md:gap-3 lg:gap-6"
  >
    <% for (let campground of campgrounds) { %>
    <div
      class="flex h-[500px] flex-col justify-between rounded-lg border border-gray-200 bg-white shadow-md dark:border-gray-600 dark:bg-gray-800 sm:max-w-sm md:mb-0"
    >
      <a href="/campgrounds/<%= campground._id %>" class="h-1/2">
        <% if (campground.images.length === 0) { %>
        <img
          src="https://jmva.or.jp/wp-content/uploads/2018/07/noimage.png"
          alt=""
          class="h-[250px] w-full rounded-t-lg object-cover"
        />
        <% } else {%>
        <img
          src="<%= campground.images[Math.floor(Math.random() * campground.images.length)].url %>"
          alt=""
          class="h-[250px] w-full rounded-t-lg object-cover"
        />
        <% } %>
      </a>
      <div
        class="flex h-1/2 flex-col justify-between p-5 text-gray-900 dark:text-white"
      >
        <div>
          <h5
            class="mb-2 text-2xl font-bold tracking-tight text-gray-900 dark:text-white"
          >
            <%= campground.title %>
          </h5>
          <div>
            <a
              href=" http://maps.google.com/?q=<%= campground.location %>"
              target="_blank"
              class="flex w-fit flex-row items-center gap-1 transition duration-500 ease-in-out hover:text-green-600 hover:duration-500"
            >
              <svg
                class="h-6 w-6"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"
                ></path>
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"
                ></path>
              </svg>
              <h6 class="text-lg font-bold"><%= campground.location %></h6>
            </a>
          </div>
          <p
            class="mb-3 font-normal text-gray-700 line-clamp-3 dark:text-gray-400"
          >
            <%= campground.description %>
          </p>
        </div>
        <a
          href="/campgrounds/<%= campground._id %>"
          class="inline-flex w-fit items-center rounded-lg bg-blue-700 py-2 px-3 text-center text-sm font-medium text-white hover:bg-blue-800 focus:ring-blue-300 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800"
          >View more
          <svg
            aria-hidden="true"
            class="ml-2 -mr-1 h-4 w-4"
            fill="currentColor"
            viewBox="0 0 20 20"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              fill-rule="evenodd"
              d="M10.293 3.293a1 1 0 011.414 0l6 6a1 1 0 010 1.414l-6 6a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-4.293-4.293a1 1 0 010-1.414z"
              clip-rule="evenodd"
            ></path>
          </svg>
        </a>
      </div>
    </div>
    <% } %>
  </div>
</section>

<script>
  mapboxgl.accessToken = `<%- process.env.MAPBOX_TOKEN %>`;
  const campgrounds = {features: <%- JSON.stringify(campgrounds) %>};
  const map = new mapboxgl.Map({
    container: 'mapbox-cluster',
    // Choose from Mapbox's core styles, or make your own style with Mapbox Studio
    style: 'mapbox://styles/mapbox/dark-v11',
    center: [-103.5917, 40.6699],
    zoom: 3
  });

  map.on('load', () => {
    // Add a new source from our GeoJSON data and
    // set the 'cluster' option to true. GL-JS will
    // add the point_count property to your source data.
    map.addSource('campgrounds', {
      type: 'geojson',
      data: campgrounds,
      cluster: true,
      clusterMaxZoom: 14, // Max zoom to cluster points on
      clusterRadius: 50 // Radius of each cluster when clustering points (defaults to 50)
    });

    map.addLayer({
      id: 'clusters',
      type: 'circle',
      source: 'campgrounds',
      filter: ['has', 'point_count'],
      paint: {
        // Use step expressions (https://docs.mapbox.com/mapbox-gl-js/style-spec/#expressions-step)
        // with three steps to implement three types of circles:
        //   * Blue, 20px circles when point count is less than 100
        //   * Yellow, 30px circles when point count is between 100 and 750
        //   * Pink, 40px circles when point count is greater than or equal to 750
        'circle-color': [
          'step',
          ['get', 'point_count'],
          '#51bbd6',
          25,
          '#f1f075',
          50,
          '#f28cb1'
        ],
        'circle-radius': ['step', ['get', 'point_count'], 15, 25, 20, 50, 25]
      }
    });

    map.addLayer({
      id: 'cluster-count',
      type: 'symbol',
      source: 'campgrounds',
      filter: ['has', 'point_count'],
      layout: {
        'text-field': ['get', 'point_count_abbreviated'],
        'text-font': ['DIN Offc Pro Medium', 'Arial Unicode MS Bold'],
        'text-size': 12
      }
    });

    map.addLayer({
      id: 'unclustered-point',
      type: 'circle',
      source: 'campgrounds',
      filter: ['!', ['has', 'point_count']],
      paint: {
        'circle-color': '#11b4da',
        'circle-radius': 6,
        'circle-stroke-width': 1,
        'circle-stroke-color': '#fff'
      }
    });

    // inspect a cluster on click
    map.on('click', 'clusters', e => {
      const features = map.queryRenderedFeatures(e.point, {
        layers: ['clusters']
      });
      const clusterId = features[0].properties.cluster_id;
      map.getSource('campgrounds').getClusterExpansionZoom(clusterId, (err, zoom) => {
        map.easeTo({
          center: features[0].geometry.coordinates,
          zoom
        });
      });
    });

    // When a click event occurs on a feature in
    // the unclustered-point layer, open a popup at
    // the location of the feature, with
    // description HTML from its properties.
    map.on('click', 'unclustered-point', e => {
      if (e.features === undefined) return;
      const coordinates = e.features[0].geometry.coordinates.slice();
      const {popUpMarkup} = e.features[0].properties;

      // Ensure that if the map is zoomed out such that
      // multiple copies of the feature are visible, the
      // popup appears over the copy being pointed to.
      while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {
        coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;
      }

      new mapboxgl.Popup()
        .setLngLat(coordinates)
        .setHTML(popUpMarkup)
        .addTo(map);
    });

    map.on('mouseenter', 'clusters', () => {
      map.getCanvas().style.cursor = 'pointer';
    });
    map.on('mouseleave', 'clusters', () => {
      map.getCanvas().style.cursor = '';
    });
  });
</script>
